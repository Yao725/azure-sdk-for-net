// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Scheduler.Models;

namespace Azure.ResourceManager.Scheduler
{
    internal partial class JobsRestOperations
    {
        private string subscriptionId;
        private Uri endpoint;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;
        private readonly string _userAgent;

        /// <summary> Initializes a new instance of JobsRestOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="options"> The client options used to construct the current client. </param>
        /// <param name="subscriptionId"> The subscription id. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="apiVersion"/> is null. </exception>
        public JobsRestOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, ClientOptions options, string subscriptionId, Uri endpoint = null, string apiVersion = "2016-03-01")
        {
            this.subscriptionId = subscriptionId ?? throw new ArgumentNullException(nameof(subscriptionId));
            this.endpoint = endpoint ?? new Uri("https://management.azure.com");
            this.apiVersion = apiVersion ?? throw new ArgumentNullException(nameof(apiVersion));
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _userAgent = HttpMessageUtilities.GetUserAgentName(this, options);
        }

        internal HttpMessage CreateGetRequest(string resourceGroupName, string jobCollectionName, string jobName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Scheduler/jobCollections/", false);
            uri.AppendPath(jobCollectionName, true);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Gets a job. </summary>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="jobCollectionName"> The job collection name. </param>
        /// <param name="jobName"> The job name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="jobCollectionName"/>, or <paramref name="jobName"/> is null. </exception>
        public async Task<Response<JobDefinitionData>> GetAsync(string resourceGroupName, string jobCollectionName, string jobName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (jobCollectionName == null)
            {
                throw new ArgumentNullException(nameof(jobCollectionName));
            }
            if (jobName == null)
            {
                throw new ArgumentNullException(nameof(jobName));
            }

            using var message = CreateGetRequest(resourceGroupName, jobCollectionName, jobName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobDefinitionData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JobDefinitionData.DeserializeJobDefinitionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((JobDefinitionData)null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a job. </summary>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="jobCollectionName"> The job collection name. </param>
        /// <param name="jobName"> The job name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="jobCollectionName"/>, or <paramref name="jobName"/> is null. </exception>
        public Response<JobDefinitionData> Get(string resourceGroupName, string jobCollectionName, string jobName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (jobCollectionName == null)
            {
                throw new ArgumentNullException(nameof(jobCollectionName));
            }
            if (jobName == null)
            {
                throw new ArgumentNullException(nameof(jobName));
            }

            using var message = CreateGetRequest(resourceGroupName, jobCollectionName, jobName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobDefinitionData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JobDefinitionData.DeserializeJobDefinitionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((JobDefinitionData)null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string resourceGroupName, string jobCollectionName, string jobName, JobDefinitionData job)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Scheduler/jobCollections/", false);
            uri.AppendPath(jobCollectionName, true);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(job);
            request.Content = content;
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Provisions a new job or updates an existing job. </summary>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="jobCollectionName"> The job collection name. </param>
        /// <param name="jobName"> The job name. </param>
        /// <param name="job"> The job definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="jobCollectionName"/>, <paramref name="jobName"/>, or <paramref name="job"/> is null. </exception>
        public async Task<Response<JobDefinitionData>> CreateOrUpdateAsync(string resourceGroupName, string jobCollectionName, string jobName, JobDefinitionData job, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (jobCollectionName == null)
            {
                throw new ArgumentNullException(nameof(jobCollectionName));
            }
            if (jobName == null)
            {
                throw new ArgumentNullException(nameof(jobName));
            }
            if (job == null)
            {
                throw new ArgumentNullException(nameof(job));
            }

            using var message = CreateCreateOrUpdateRequest(resourceGroupName, jobCollectionName, jobName, job);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        JobDefinitionData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JobDefinitionData.DeserializeJobDefinitionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Provisions a new job or updates an existing job. </summary>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="jobCollectionName"> The job collection name. </param>
        /// <param name="jobName"> The job name. </param>
        /// <param name="job"> The job definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="jobCollectionName"/>, <paramref name="jobName"/>, or <paramref name="job"/> is null. </exception>
        public Response<JobDefinitionData> CreateOrUpdate(string resourceGroupName, string jobCollectionName, string jobName, JobDefinitionData job, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (jobCollectionName == null)
            {
                throw new ArgumentNullException(nameof(jobCollectionName));
            }
            if (jobName == null)
            {
                throw new ArgumentNullException(nameof(jobName));
            }
            if (job == null)
            {
                throw new ArgumentNullException(nameof(job));
            }

            using var message = CreateCreateOrUpdateRequest(resourceGroupName, jobCollectionName, jobName, job);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        JobDefinitionData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JobDefinitionData.DeserializeJobDefinitionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePatchRequest(string resourceGroupName, string jobCollectionName, string jobName, JobDefinitionData job)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Scheduler/jobCollections/", false);
            uri.AppendPath(jobCollectionName, true);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(job);
            request.Content = content;
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Patches an existing job. </summary>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="jobCollectionName"> The job collection name. </param>
        /// <param name="jobName"> The job name. </param>
        /// <param name="job"> The job definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="jobCollectionName"/>, <paramref name="jobName"/>, or <paramref name="job"/> is null. </exception>
        public async Task<Response<JobDefinitionData>> PatchAsync(string resourceGroupName, string jobCollectionName, string jobName, JobDefinitionData job, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (jobCollectionName == null)
            {
                throw new ArgumentNullException(nameof(jobCollectionName));
            }
            if (jobName == null)
            {
                throw new ArgumentNullException(nameof(jobName));
            }
            if (job == null)
            {
                throw new ArgumentNullException(nameof(job));
            }

            using var message = CreatePatchRequest(resourceGroupName, jobCollectionName, jobName, job);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobDefinitionData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JobDefinitionData.DeserializeJobDefinitionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Patches an existing job. </summary>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="jobCollectionName"> The job collection name. </param>
        /// <param name="jobName"> The job name. </param>
        /// <param name="job"> The job definition. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="jobCollectionName"/>, <paramref name="jobName"/>, or <paramref name="job"/> is null. </exception>
        public Response<JobDefinitionData> Patch(string resourceGroupName, string jobCollectionName, string jobName, JobDefinitionData job, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (jobCollectionName == null)
            {
                throw new ArgumentNullException(nameof(jobCollectionName));
            }
            if (jobName == null)
            {
                throw new ArgumentNullException(nameof(jobName));
            }
            if (job == null)
            {
                throw new ArgumentNullException(nameof(job));
            }

            using var message = CreatePatchRequest(resourceGroupName, jobCollectionName, jobName, job);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobDefinitionData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JobDefinitionData.DeserializeJobDefinitionData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRequest(string resourceGroupName, string jobCollectionName, string jobName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Scheduler/jobCollections/", false);
            uri.AppendPath(jobCollectionName, true);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Deletes a job. </summary>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="jobCollectionName"> The job collection name. </param>
        /// <param name="jobName"> The job name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="jobCollectionName"/>, or <paramref name="jobName"/> is null. </exception>
        public async Task<Response> DeleteAsync(string resourceGroupName, string jobCollectionName, string jobName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (jobCollectionName == null)
            {
                throw new ArgumentNullException(nameof(jobCollectionName));
            }
            if (jobName == null)
            {
                throw new ArgumentNullException(nameof(jobName));
            }

            using var message = CreateDeleteRequest(resourceGroupName, jobCollectionName, jobName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes a job. </summary>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="jobCollectionName"> The job collection name. </param>
        /// <param name="jobName"> The job name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="jobCollectionName"/>, or <paramref name="jobName"/> is null. </exception>
        public Response Delete(string resourceGroupName, string jobCollectionName, string jobName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (jobCollectionName == null)
            {
                throw new ArgumentNullException(nameof(jobCollectionName));
            }
            if (jobName == null)
            {
                throw new ArgumentNullException(nameof(jobName));
            }

            using var message = CreateDeleteRequest(resourceGroupName, jobCollectionName, jobName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRunRequest(string resourceGroupName, string jobCollectionName, string jobName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Scheduler/jobCollections/", false);
            uri.AppendPath(jobCollectionName, true);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobName, true);
            uri.AppendPath("/run", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Runs a job. </summary>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="jobCollectionName"> The job collection name. </param>
        /// <param name="jobName"> The job name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="jobCollectionName"/>, or <paramref name="jobName"/> is null. </exception>
        public async Task<Response> RunAsync(string resourceGroupName, string jobCollectionName, string jobName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (jobCollectionName == null)
            {
                throw new ArgumentNullException(nameof(jobCollectionName));
            }
            if (jobName == null)
            {
                throw new ArgumentNullException(nameof(jobName));
            }

            using var message = CreateRunRequest(resourceGroupName, jobCollectionName, jobName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Runs a job. </summary>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="jobCollectionName"> The job collection name. </param>
        /// <param name="jobName"> The job name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="jobCollectionName"/>, or <paramref name="jobName"/> is null. </exception>
        public Response Run(string resourceGroupName, string jobCollectionName, string jobName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (jobCollectionName == null)
            {
                throw new ArgumentNullException(nameof(jobCollectionName));
            }
            if (jobName == null)
            {
                throw new ArgumentNullException(nameof(jobName));
            }

            using var message = CreateRunRequest(resourceGroupName, jobCollectionName, jobName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllRequest(string resourceGroupName, string jobCollectionName, int? top, int? skip, string filter)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Scheduler/jobCollections/", false);
            uri.AppendPath(jobCollectionName, true);
            uri.AppendPath("/jobs", false);
            uri.AppendQuery("api-version", apiVersion, true);
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Lists all jobs under the specified job collection. </summary>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="jobCollectionName"> The job collection name. </param>
        /// <param name="top"> The number of jobs to request, in the of range of [1..100]. </param>
        /// <param name="skip"> The (0-based) index of the job history list from which to begin requesting entries. </param>
        /// <param name="filter"> The filter to apply on the job state. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="jobCollectionName"/> is null. </exception>
        public async Task<Response<JobListResult>> GetAllAsync(string resourceGroupName, string jobCollectionName, int? top = null, int? skip = null, string filter = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (jobCollectionName == null)
            {
                throw new ArgumentNullException(nameof(jobCollectionName));
            }

            using var message = CreateGetAllRequest(resourceGroupName, jobCollectionName, top, skip, filter);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JobListResult.DeserializeJobListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Lists all jobs under the specified job collection. </summary>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="jobCollectionName"> The job collection name. </param>
        /// <param name="top"> The number of jobs to request, in the of range of [1..100]. </param>
        /// <param name="skip"> The (0-based) index of the job history list from which to begin requesting entries. </param>
        /// <param name="filter"> The filter to apply on the job state. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="jobCollectionName"/> is null. </exception>
        public Response<JobListResult> GetAll(string resourceGroupName, string jobCollectionName, int? top = null, int? skip = null, string filter = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (jobCollectionName == null)
            {
                throw new ArgumentNullException(nameof(jobCollectionName));
            }

            using var message = CreateGetAllRequest(resourceGroupName, jobCollectionName, top, skip, filter);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JobListResult.DeserializeJobListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetJobHistoryRequest(string resourceGroupName, string jobCollectionName, string jobName, int? top, int? skip, string filter)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Scheduler/jobCollections/", false);
            uri.AppendPath(jobCollectionName, true);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobName, true);
            uri.AppendPath("/history", false);
            uri.AppendQuery("api-version", apiVersion, true);
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Lists job history. </summary>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="jobCollectionName"> The job collection name. </param>
        /// <param name="jobName"> The job name. </param>
        /// <param name="top"> the number of job history to request, in the of range of [1..100]. </param>
        /// <param name="skip"> The (0-based) index of the job history list from which to begin requesting entries. </param>
        /// <param name="filter"> The filter to apply on the job state. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="jobCollectionName"/>, or <paramref name="jobName"/> is null. </exception>
        public async Task<Response<JobHistoryListResult>> GetJobHistoryAsync(string resourceGroupName, string jobCollectionName, string jobName, int? top = null, int? skip = null, string filter = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (jobCollectionName == null)
            {
                throw new ArgumentNullException(nameof(jobCollectionName));
            }
            if (jobName == null)
            {
                throw new ArgumentNullException(nameof(jobName));
            }

            using var message = CreateGetJobHistoryRequest(resourceGroupName, jobCollectionName, jobName, top, skip, filter);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobHistoryListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JobHistoryListResult.DeserializeJobHistoryListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Lists job history. </summary>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="jobCollectionName"> The job collection name. </param>
        /// <param name="jobName"> The job name. </param>
        /// <param name="top"> the number of job history to request, in the of range of [1..100]. </param>
        /// <param name="skip"> The (0-based) index of the job history list from which to begin requesting entries. </param>
        /// <param name="filter"> The filter to apply on the job state. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="jobCollectionName"/>, or <paramref name="jobName"/> is null. </exception>
        public Response<JobHistoryListResult> GetJobHistory(string resourceGroupName, string jobCollectionName, string jobName, int? top = null, int? skip = null, string filter = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (jobCollectionName == null)
            {
                throw new ArgumentNullException(nameof(jobCollectionName));
            }
            if (jobName == null)
            {
                throw new ArgumentNullException(nameof(jobName));
            }

            using var message = CreateGetJobHistoryRequest(resourceGroupName, jobCollectionName, jobName, top, skip, filter);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobHistoryListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JobHistoryListResult.DeserializeJobHistoryListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllNextPageRequest(string nextLink, string resourceGroupName, string jobCollectionName, int? top, int? skip, string filter)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Lists all jobs under the specified job collection. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="jobCollectionName"> The job collection name. </param>
        /// <param name="top"> The number of jobs to request, in the of range of [1..100]. </param>
        /// <param name="skip"> The (0-based) index of the job history list from which to begin requesting entries. </param>
        /// <param name="filter"> The filter to apply on the job state. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="resourceGroupName"/>, or <paramref name="jobCollectionName"/> is null. </exception>
        public async Task<Response<JobListResult>> GetAllNextPageAsync(string nextLink, string resourceGroupName, string jobCollectionName, int? top = null, int? skip = null, string filter = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (jobCollectionName == null)
            {
                throw new ArgumentNullException(nameof(jobCollectionName));
            }

            using var message = CreateGetAllNextPageRequest(nextLink, resourceGroupName, jobCollectionName, top, skip, filter);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JobListResult.DeserializeJobListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Lists all jobs under the specified job collection. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="jobCollectionName"> The job collection name. </param>
        /// <param name="top"> The number of jobs to request, in the of range of [1..100]. </param>
        /// <param name="skip"> The (0-based) index of the job history list from which to begin requesting entries. </param>
        /// <param name="filter"> The filter to apply on the job state. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="resourceGroupName"/>, or <paramref name="jobCollectionName"/> is null. </exception>
        public Response<JobListResult> GetAllNextPage(string nextLink, string resourceGroupName, string jobCollectionName, int? top = null, int? skip = null, string filter = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (jobCollectionName == null)
            {
                throw new ArgumentNullException(nameof(jobCollectionName));
            }

            using var message = CreateGetAllNextPageRequest(nextLink, resourceGroupName, jobCollectionName, top, skip, filter);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JobListResult.DeserializeJobListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetJobHistoryNextPageRequest(string nextLink, string resourceGroupName, string jobCollectionName, string jobName, int? top, int? skip, string filter)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Lists job history. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="jobCollectionName"> The job collection name. </param>
        /// <param name="jobName"> The job name. </param>
        /// <param name="top"> the number of job history to request, in the of range of [1..100]. </param>
        /// <param name="skip"> The (0-based) index of the job history list from which to begin requesting entries. </param>
        /// <param name="filter"> The filter to apply on the job state. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="resourceGroupName"/>, <paramref name="jobCollectionName"/>, or <paramref name="jobName"/> is null. </exception>
        public async Task<Response<JobHistoryListResult>> GetJobHistoryNextPageAsync(string nextLink, string resourceGroupName, string jobCollectionName, string jobName, int? top = null, int? skip = null, string filter = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (jobCollectionName == null)
            {
                throw new ArgumentNullException(nameof(jobCollectionName));
            }
            if (jobName == null)
            {
                throw new ArgumentNullException(nameof(jobName));
            }

            using var message = CreateGetJobHistoryNextPageRequest(nextLink, resourceGroupName, jobCollectionName, jobName, top, skip, filter);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobHistoryListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = JobHistoryListResult.DeserializeJobHistoryListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Lists job history. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="resourceGroupName"> The resource group name. </param>
        /// <param name="jobCollectionName"> The job collection name. </param>
        /// <param name="jobName"> The job name. </param>
        /// <param name="top"> the number of job history to request, in the of range of [1..100]. </param>
        /// <param name="skip"> The (0-based) index of the job history list from which to begin requesting entries. </param>
        /// <param name="filter"> The filter to apply on the job state. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="resourceGroupName"/>, <paramref name="jobCollectionName"/>, or <paramref name="jobName"/> is null. </exception>
        public Response<JobHistoryListResult> GetJobHistoryNextPage(string nextLink, string resourceGroupName, string jobCollectionName, string jobName, int? top = null, int? skip = null, string filter = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (jobCollectionName == null)
            {
                throw new ArgumentNullException(nameof(jobCollectionName));
            }
            if (jobName == null)
            {
                throw new ArgumentNullException(nameof(jobName));
            }

            using var message = CreateGetJobHistoryNextPageRequest(nextLink, resourceGroupName, jobCollectionName, jobName, top, skip, filter);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        JobHistoryListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = JobHistoryListResult.DeserializeJobHistoryListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
