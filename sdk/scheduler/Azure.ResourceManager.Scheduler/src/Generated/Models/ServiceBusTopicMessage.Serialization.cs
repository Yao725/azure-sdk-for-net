// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Scheduler.Models
{
    public partial class ServiceBusTopicMessage : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(TopicPath))
            {
                writer.WritePropertyName("topicPath");
                writer.WriteStringValue(TopicPath);
            }
            if (Optional.IsDefined(Authentication))
            {
                writer.WritePropertyName("authentication");
                writer.WriteObjectValue(Authentication);
            }
            if (Optional.IsDefined(BrokeredMessageProperties))
            {
                writer.WritePropertyName("brokeredMessageProperties");
                writer.WriteObjectValue(BrokeredMessageProperties);
            }
            if (Optional.IsCollectionDefined(CustomMessageProperties))
            {
                writer.WritePropertyName("customMessageProperties");
                writer.WriteStartObject();
                foreach (var item in CustomMessageProperties)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(Message))
            {
                writer.WritePropertyName("message");
                writer.WriteStringValue(Message);
            }
            if (Optional.IsDefined(Namespace))
            {
                writer.WritePropertyName("namespace");
                writer.WriteStringValue(Namespace);
            }
            if (Optional.IsDefined(TransportType))
            {
                writer.WritePropertyName("transportType");
                writer.WriteStringValue(TransportType.Value.ToSerialString());
            }
            writer.WriteEndObject();
        }

        internal static ServiceBusTopicMessage DeserializeServiceBusTopicMessage(JsonElement element)
        {
            Optional<string> topicPath = default;
            Optional<ServiceBusAuthentication> authentication = default;
            Optional<ServiceBusBrokeredMessageProperties> brokeredMessageProperties = default;
            Optional<IDictionary<string, string>> customMessageProperties = default;
            Optional<string> message = default;
            Optional<string> @namespace = default;
            Optional<ServiceBusTransportType> transportType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("topicPath"))
                {
                    topicPath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("authentication"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    authentication = ServiceBusAuthentication.DeserializeServiceBusAuthentication(property.Value);
                    continue;
                }
                if (property.NameEquals("brokeredMessageProperties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    brokeredMessageProperties = ServiceBusBrokeredMessageProperties.DeserializeServiceBusBrokeredMessageProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("customMessageProperties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    customMessageProperties = dictionary;
                    continue;
                }
                if (property.NameEquals("message"))
                {
                    message = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("namespace"))
                {
                    @namespace = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("transportType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    transportType = property.Value.GetString().ToServiceBusTransportType();
                    continue;
                }
            }
            return new ServiceBusTopicMessage(authentication.Value, brokeredMessageProperties.Value, Optional.ToDictionary(customMessageProperties), message.Value, @namespace.Value, Optional.ToNullable(transportType), topicPath.Value);
        }
    }
}
