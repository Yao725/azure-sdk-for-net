// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Scheduler.Models
{
    public partial class JobRecurrenceScheduleMonthlyOccurrence : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Day))
            {
                writer.WritePropertyName("day");
                writer.WriteStringValue(Day.Value.ToSerialString());
            }
            if (Optional.IsDefined(Occurrence))
            {
                writer.WritePropertyName("Occurrence");
                writer.WriteNumberValue(Occurrence.Value);
            }
            writer.WriteEndObject();
        }

        internal static JobRecurrenceScheduleMonthlyOccurrence DeserializeJobRecurrenceScheduleMonthlyOccurrence(JsonElement element)
        {
            Optional<JobScheduleDay> day = default;
            Optional<int> occurrence = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("day"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    day = property.Value.GetString().ToJobScheduleDay();
                    continue;
                }
                if (property.NameEquals("Occurrence"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    occurrence = property.Value.GetInt32();
                    continue;
                }
            }
            return new JobRecurrenceScheduleMonthlyOccurrence(Optional.ToNullable(day), Optional.ToNullable(occurrence));
        }
    }
}
