// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Scheduler.Models
{
    public partial class ServiceBusBrokeredMessageProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ContentType))
            {
                writer.WritePropertyName("contentType");
                writer.WriteStringValue(ContentType);
            }
            if (Optional.IsDefined(CorrelationId))
            {
                writer.WritePropertyName("correlationId");
                writer.WriteStringValue(CorrelationId);
            }
            if (Optional.IsDefined(ForcePersistence))
            {
                writer.WritePropertyName("forcePersistence");
                writer.WriteBooleanValue(ForcePersistence.Value);
            }
            if (Optional.IsDefined(Label))
            {
                writer.WritePropertyName("label");
                writer.WriteStringValue(Label);
            }
            if (Optional.IsDefined(MessageId))
            {
                writer.WritePropertyName("messageId");
                writer.WriteStringValue(MessageId);
            }
            if (Optional.IsDefined(PartitionKey))
            {
                writer.WritePropertyName("partitionKey");
                writer.WriteStringValue(PartitionKey);
            }
            if (Optional.IsDefined(ReplyTo))
            {
                writer.WritePropertyName("replyTo");
                writer.WriteStringValue(ReplyTo);
            }
            if (Optional.IsDefined(ReplyToSessionId))
            {
                writer.WritePropertyName("replyToSessionId");
                writer.WriteStringValue(ReplyToSessionId);
            }
            if (Optional.IsDefined(ScheduledEnqueueTimeUtc))
            {
                writer.WritePropertyName("scheduledEnqueueTimeUtc");
                writer.WriteStringValue(ScheduledEnqueueTimeUtc.Value, "O");
            }
            if (Optional.IsDefined(SessionId))
            {
                writer.WritePropertyName("sessionId");
                writer.WriteStringValue(SessionId);
            }
            if (Optional.IsDefined(TimeToLive))
            {
                writer.WritePropertyName("timeToLive");
                writer.WriteStringValue(TimeToLive.Value, "P");
            }
            if (Optional.IsDefined(To))
            {
                writer.WritePropertyName("to");
                writer.WriteStringValue(To);
            }
            if (Optional.IsDefined(ViaPartitionKey))
            {
                writer.WritePropertyName("viaPartitionKey");
                writer.WriteStringValue(ViaPartitionKey);
            }
            writer.WriteEndObject();
        }

        internal static ServiceBusBrokeredMessageProperties DeserializeServiceBusBrokeredMessageProperties(JsonElement element)
        {
            Optional<string> contentType = default;
            Optional<string> correlationId = default;
            Optional<bool> forcePersistence = default;
            Optional<string> label = default;
            Optional<string> messageId = default;
            Optional<string> partitionKey = default;
            Optional<string> replyTo = default;
            Optional<string> replyToSessionId = default;
            Optional<DateTimeOffset> scheduledEnqueueTimeUtc = default;
            Optional<string> sessionId = default;
            Optional<TimeSpan> timeToLive = default;
            Optional<string> to = default;
            Optional<string> viaPartitionKey = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("contentType"))
                {
                    contentType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("correlationId"))
                {
                    correlationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("forcePersistence"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    forcePersistence = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("label"))
                {
                    label = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("messageId"))
                {
                    messageId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("partitionKey"))
                {
                    partitionKey = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("replyTo"))
                {
                    replyTo = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("replyToSessionId"))
                {
                    replyToSessionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("scheduledEnqueueTimeUtc"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    scheduledEnqueueTimeUtc = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("sessionId"))
                {
                    sessionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("timeToLive"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    timeToLive = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("to"))
                {
                    to = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("viaPartitionKey"))
                {
                    viaPartitionKey = property.Value.GetString();
                    continue;
                }
            }
            return new ServiceBusBrokeredMessageProperties(contentType.Value, correlationId.Value, Optional.ToNullable(forcePersistence), label.Value, messageId.Value, partitionKey.Value, replyTo.Value, replyToSessionId.Value, Optional.ToNullable(scheduledEnqueueTimeUtc), sessionId.Value, Optional.ToNullable(timeToLive), to.Value, viaPartitionKey.Value);
        }
    }
}
