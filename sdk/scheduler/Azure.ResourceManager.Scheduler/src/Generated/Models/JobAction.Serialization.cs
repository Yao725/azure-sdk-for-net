// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Scheduler.Models
{
    public partial class JobAction : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Type))
            {
                writer.WritePropertyName("type");
                writer.WriteStringValue(Type.Value.ToSerialString());
            }
            if (Optional.IsDefined(Request))
            {
                writer.WritePropertyName("request");
                writer.WriteObjectValue(Request);
            }
            if (Optional.IsDefined(QueueMessage))
            {
                writer.WritePropertyName("queueMessage");
                writer.WriteObjectValue(QueueMessage);
            }
            if (Optional.IsDefined(ServiceBusQueueMessage))
            {
                writer.WritePropertyName("serviceBusQueueMessage");
                writer.WriteObjectValue(ServiceBusQueueMessage);
            }
            if (Optional.IsDefined(ServiceBusTopicMessage))
            {
                writer.WritePropertyName("serviceBusTopicMessage");
                writer.WriteObjectValue(ServiceBusTopicMessage);
            }
            if (Optional.IsDefined(RetryPolicy))
            {
                writer.WritePropertyName("retryPolicy");
                writer.WriteObjectValue(RetryPolicy);
            }
            if (Optional.IsDefined(ErrorAction))
            {
                writer.WritePropertyName("errorAction");
                writer.WriteObjectValue(ErrorAction);
            }
            writer.WriteEndObject();
        }

        internal static JobAction DeserializeJobAction(JsonElement element)
        {
            Optional<JobActionType> type = default;
            Optional<HttpRequest> request = default;
            Optional<StorageQueueMessage> queueMessage = default;
            Optional<ServiceBusQueueMessage> serviceBusQueueMessage = default;
            Optional<ServiceBusTopicMessage> serviceBusTopicMessage = default;
            Optional<RetryPolicy> retryPolicy = default;
            Optional<JobErrorAction> errorAction = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    type = property.Value.GetString().ToJobActionType();
                    continue;
                }
                if (property.NameEquals("request"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    request = HttpRequest.DeserializeHttpRequest(property.Value);
                    continue;
                }
                if (property.NameEquals("queueMessage"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    queueMessage = StorageQueueMessage.DeserializeStorageQueueMessage(property.Value);
                    continue;
                }
                if (property.NameEquals("serviceBusQueueMessage"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    serviceBusQueueMessage = ServiceBusQueueMessage.DeserializeServiceBusQueueMessage(property.Value);
                    continue;
                }
                if (property.NameEquals("serviceBusTopicMessage"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    serviceBusTopicMessage = ServiceBusTopicMessage.DeserializeServiceBusTopicMessage(property.Value);
                    continue;
                }
                if (property.NameEquals("retryPolicy"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    retryPolicy = RetryPolicy.DeserializeRetryPolicy(property.Value);
                    continue;
                }
                if (property.NameEquals("errorAction"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    errorAction = JobErrorAction.DeserializeJobErrorAction(property.Value);
                    continue;
                }
            }
            return new JobAction(Optional.ToNullable(type), request.Value, queueMessage.Value, serviceBusQueueMessage.Value, serviceBusTopicMessage.Value, retryPolicy.Value, errorAction.Value);
        }
    }
}
