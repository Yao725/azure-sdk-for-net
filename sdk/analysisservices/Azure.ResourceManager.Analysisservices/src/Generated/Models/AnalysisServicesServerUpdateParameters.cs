// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.Analysisservices.Models
{
    /// <summary> Provision request specification. </summary>
    public partial class AnalysisServicesServerUpdateParameters
    {
        /// <summary> Initializes a new instance of AnalysisServicesServerUpdateParameters. </summary>
        public AnalysisServicesServerUpdateParameters()
        {
            Tags = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> The SKU of the Analysis Services resource. </summary>
        public ResourceSku Sku { get; set; }
        /// <summary> Key-value pairs of additional provisioning properties. </summary>
        public IDictionary<string, string> Tags { get; }
        /// <summary> A collection of AS server administrators. </summary>
        public ServerAdministrators AsAdministrators { get; set; }
        /// <summary> The SAS container URI to the backup container. </summary>
        public string BackupBlobContainerUri { get; set; }
        /// <summary> The gateway details configured for the AS server. </summary>
        public GatewayDetails GatewayDetails { get; set; }
        /// <summary> The firewall settings for the AS server. </summary>
        public IPv4FirewallSettings IpV4FirewallSettings { get; set; }
        /// <summary> How the read-write server&apos;s participation in the query pool is controlled.&lt;br/&gt;It can have the following values: &lt;ul&gt;&lt;li&gt;readOnly - indicates that the read-write server is intended not to participate in query operations&lt;/li&gt;&lt;li&gt;all - indicates that the read-write server can participate in query operations&lt;/li&gt;&lt;/ul&gt;Specifying readOnly when capacity is 1 results in error. </summary>
        public ConnectionMode? QuerypoolConnectionMode { get; set; }
        /// <summary> The managed mode of the server (0 = not managed, 1 = managed). </summary>
        public ManagedMode? ManagedMode { get; set; }
        /// <summary> The server monitor mode for AS server. </summary>
        public ServerMonitorMode? ServerMonitorMode { get; set; }
    }
}
