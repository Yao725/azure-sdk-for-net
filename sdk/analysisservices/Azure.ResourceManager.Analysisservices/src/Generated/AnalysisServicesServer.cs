// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Analysisservices.Models;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.Analysisservices
{
    /// <summary> A Class representing a AnalysisServicesServer along with the instance operations that can be performed on it. </summary>
    public partial class AnalysisServicesServer : ArmResource
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly ServersRestOperations _restClient;
        private readonly AnalysisServicesServerData _data;

        /// <summary> Initializes a new instance of the <see cref="AnalysisServicesServer"/> class for mocking. </summary>
        protected AnalysisServicesServer()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "AnalysisServicesServer"/> class. </summary>
        /// <param name="options"> The client parameters to use in these operations. </param>
        /// <param name="resource"> The resource that is the target of operations. </param>
        internal AnalysisServicesServer(ArmResource options, AnalysisServicesServerData resource) : base(options, resource.Id)
        {
            HasData = true;
            _data = resource;
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _restClient = new ServersRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
        }

        /// <summary> Initializes a new instance of the <see cref="AnalysisServicesServer"/> class. </summary>
        /// <param name="options"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal AnalysisServicesServer(ArmResource options, ResourceIdentifier id) : base(options, id)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _restClient = new ServersRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.AnalysisServices/servers";

        /// <summary> Gets the valid resource type for the operations. </summary>
        protected override ResourceType ValidResourceType => ResourceType;

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual AnalysisServicesServerData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        /// <summary> Gets details about the specified Analysis Services server. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<AnalysisServicesServer>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AnalysisServicesServer.Get");
            scope.Start();
            try
            {
                var response = await _restClient.GetDetailsAsync(Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new AnalysisServicesServer(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets details about the specified Analysis Services server. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AnalysisServicesServer> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AnalysisServicesServer.Get");
            scope.Start();
            try
            {
                var response = _restClient.GetDetails(Id.ResourceGroupName, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AnalysisServicesServer(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        public async virtual Task<IEnumerable<Location>> GetAvailableLocationsAsync(CancellationToken cancellationToken = default)
        {
            return await ListAvailableLocationsAsync(ResourceType, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        public virtual IEnumerable<Location> GetAvailableLocations(CancellationToken cancellationToken = default)
        {
            return ListAvailableLocations(ResourceType, cancellationToken);
        }

        /// <summary> Deletes the specified Analysis Services server. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<ServerDeleteOperation> DeleteAsync(bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AnalysisServicesServer.Delete");
            scope.Start();
            try
            {
                var response = await _restClient.DeleteAsync(Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new ServerDeleteOperation(_clientDiagnostics, Pipeline, _restClient.CreateDeleteRequest(Id.ResourceGroupName, Id.Name).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified Analysis Services server. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ServerDeleteOperation Delete(bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AnalysisServicesServer.Delete");
            scope.Start();
            try
            {
                var response = _restClient.Delete(Id.ResourceGroupName, Id.Name, cancellationToken);
                var operation = new ServerDeleteOperation(_clientDiagnostics, Pipeline, _restClient.CreateDeleteRequest(Id.ResourceGroupName, Id.Name).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
        /// <summary> Lists eligible SKUs for an Analysis Services resource. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<SkuDetailsForExistingResource>>> GetSkusForExistingAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AnalysisServicesServer.GetSkusForExisting");
            scope.Start();
            try
            {
                var response = await _restClient.GetSkusForExistingAsync(Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value.Value, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists eligible SKUs for an Analysis Services resource. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<SkuDetailsForExistingResource>> GetSkusForExisting(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AnalysisServicesServer.GetSkusForExisting");
            scope.Start();
            try
            {
                var response = _restClient.GetSkusForExisting(Id.ResourceGroupName, Id.Name, cancellationToken);
                return Response.FromValue(response.Value.Value, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return the gateway status of the specified Analysis Services server instance. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<GatewayListStatusLive>> GetGatewayStatusAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AnalysisServicesServer.GetGatewayStatus");
            scope.Start();
            try
            {
                var response = await _restClient.GetGatewayStatusAsync(Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Return the gateway status of the specified Analysis Services server instance. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<GatewayListStatusLive> GetGatewayStatus(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AnalysisServicesServer.GetGatewayStatus");
            scope.Start();
            try
            {
                var response = _restClient.GetGatewayStatus(Id.ResourceGroupName, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Dissociates a Unified Gateway associated with the server. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DissociateGatewayAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AnalysisServicesServer.DissociateGateway");
            scope.Start();
            try
            {
                var response = await _restClient.DissociateGatewayAsync(Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Dissociates a Unified Gateway associated with the server. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DissociateGateway(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AnalysisServicesServer.DissociateGateway");
            scope.Start();
            try
            {
                var response = _restClient.DissociateGateway(Id.ResourceGroupName, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Check the name availability in the target location. </summary>
        /// <param name="serverParameters"> Contains the information used to provision the Analysis Services server. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverParameters"/> is null. </exception>
        public virtual async Task<Response<CheckServerNameAvailabilityResult>> CheckNameAvailabilityAsync(Models.CheckServerNameAvailabilityParameters serverParameters, CancellationToken cancellationToken = default)
        {
            if (serverParameters == null)
            {
                throw new ArgumentNullException(nameof(serverParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("AnalysisServicesServer.CheckNameAvailability");
            scope.Start();
            try
            {
                var response = await _restClient.CheckNameAvailabilityAsync(Id.Name, serverParameters, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Check the name availability in the target location. </summary>
        /// <param name="serverParameters"> Contains the information used to provision the Analysis Services server. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverParameters"/> is null. </exception>
        public virtual Response<CheckServerNameAvailabilityResult> CheckNameAvailability(Models.CheckServerNameAvailabilityParameters serverParameters, CancellationToken cancellationToken = default)
        {
            if (serverParameters == null)
            {
                throw new ArgumentNullException(nameof(serverParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("AnalysisServicesServer.CheckNameAvailability");
            scope.Start();
            try
            {
                var response = _restClient.CheckNameAvailability(Id.Name, serverParameters, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List the result of the specified operation. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetOperationResultsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AnalysisServicesServer.GetOperationResults");
            scope.Start();
            try
            {
                var response = await _restClient.GetOperationResultsAsync(Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List the result of the specified operation. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetOperationResults(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AnalysisServicesServer.GetOperationResults");
            scope.Start();
            try
            {
                var response = _restClient.GetOperationResults(Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List the status of operation. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<OperationStatus>> GetOperationStatusesAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AnalysisServicesServer.GetOperationStatuses");
            scope.Start();
            try
            {
                var response = await _restClient.GetOperationStatusesAsync(Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List the status of operation. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<OperationStatus> GetOperationStatuses(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AnalysisServicesServer.GetOperationStatuses");
            scope.Start();
            try
            {
                var response = _restClient.GetOperationStatuses(Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the current state of the specified Analysis Services server. </summary>
        /// <param name="serverUpdateParameters"> Request object that contains the updated information for the server. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverUpdateParameters"/> is null. </exception>
        public async virtual Task<ServerUpdateOperation> UpdateAsync(AnalysisServicesServerUpdateParameters serverUpdateParameters, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (serverUpdateParameters == null)
            {
                throw new ArgumentNullException(nameof(serverUpdateParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("AnalysisServicesServer.Update");
            scope.Start();
            try
            {
                var response = await _restClient.UpdateAsync(Id.ResourceGroupName, Id.Name, serverUpdateParameters, cancellationToken).ConfigureAwait(false);
                var operation = new ServerUpdateOperation(this, _clientDiagnostics, Pipeline, _restClient.CreateUpdateRequest(Id.ResourceGroupName, Id.Name, serverUpdateParameters).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the current state of the specified Analysis Services server. </summary>
        /// <param name="serverUpdateParameters"> Request object that contains the updated information for the server. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverUpdateParameters"/> is null. </exception>
        public virtual ServerUpdateOperation Update(AnalysisServicesServerUpdateParameters serverUpdateParameters, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (serverUpdateParameters == null)
            {
                throw new ArgumentNullException(nameof(serverUpdateParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("AnalysisServicesServer.Update");
            scope.Start();
            try
            {
                var response = _restClient.Update(Id.ResourceGroupName, Id.Name, serverUpdateParameters, cancellationToken);
                var operation = new ServerUpdateOperation(this, _clientDiagnostics, Pipeline, _restClient.CreateUpdateRequest(Id.ResourceGroupName, Id.Name, serverUpdateParameters).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Suspends operation of the specified Analysis Services server instance. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<ServerSuspendOperation> SuspendAsync(bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AnalysisServicesServer.Suspend");
            scope.Start();
            try
            {
                var response = await _restClient.SuspendAsync(Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new ServerSuspendOperation(_clientDiagnostics, Pipeline, _restClient.CreateSuspendRequest(Id.ResourceGroupName, Id.Name).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Suspends operation of the specified Analysis Services server instance. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ServerSuspendOperation Suspend(bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AnalysisServicesServer.Suspend");
            scope.Start();
            try
            {
                var response = _restClient.Suspend(Id.ResourceGroupName, Id.Name, cancellationToken);
                var operation = new ServerSuspendOperation(_clientDiagnostics, Pipeline, _restClient.CreateSuspendRequest(Id.ResourceGroupName, Id.Name).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Resumes operation of the specified Analysis Services server instance. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<ServerResumeOperation> ResumeAsync(bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AnalysisServicesServer.Resume");
            scope.Start();
            try
            {
                var response = await _restClient.ResumeAsync(Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new ServerResumeOperation(_clientDiagnostics, Pipeline, _restClient.CreateResumeRequest(Id.ResourceGroupName, Id.Name).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Resumes operation of the specified Analysis Services server instance. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ServerResumeOperation Resume(bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AnalysisServicesServer.Resume");
            scope.Start();
            try
            {
                var response = _restClient.Resume(Id.ResourceGroupName, Id.Name, cancellationToken);
                var operation = new ServerResumeOperation(_clientDiagnostics, Pipeline, _restClient.CreateResumeRequest(Id.ResourceGroupName, Id.Name).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
