// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Marketplace.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.Marketplace
{
    /// <summary> A Class representing a PrivateStore along with the instance operations that can be performed on it. </summary>
    public partial class PrivateStore : ArmResource
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly PrivateStoreRestOperations _restClient;
        private readonly PrivateStoreData _data;

        /// <summary> Initializes a new instance of the <see cref="PrivateStore"/> class for mocking. </summary>
        protected PrivateStore()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "PrivateStore"/> class. </summary>
        /// <param name="options"> The client parameters to use in these operations. </param>
        /// <param name="resource"> The resource that is the target of operations. </param>
        internal PrivateStore(ArmResource options, PrivateStoreData resource) : base(options, resource.Id)
        {
            HasData = true;
            _data = resource;
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _restClient = new PrivateStoreRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Initializes a new instance of the <see cref="PrivateStore"/> class. </summary>
        /// <param name="options"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal PrivateStore(ArmResource options, ResourceIdentifier id) : base(options, id)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _restClient = new PrivateStoreRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Marketplace/privateStores";

        /// <summary> Gets the valid resource type for the operations. </summary>
        protected override ResourceType ValidResourceType => ResourceType;

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual PrivateStoreData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        /// <summary> Get information about the private store. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<PrivateStore>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.Get");
            scope.Start();
            try
            {
                var response = await _restClient.GetAsync(Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new PrivateStore(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get information about the private store. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PrivateStore> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.Get");
            scope.Start();
            try
            {
                var response = _restClient.Get(Id.Name, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new PrivateStore(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        public async virtual Task<IEnumerable<Location>> GetAvailableLocationsAsync(CancellationToken cancellationToken = default)
        {
            return await ListAvailableLocationsAsync(ResourceType, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        public virtual IEnumerable<Location> GetAvailableLocations(CancellationToken cancellationToken = default)
        {
            return ListAvailableLocations(ResourceType, cancellationToken);
        }

        /// <summary> Deletes the private store. All that is not saved will be lost. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<PrivateStoreDeleteOperation> DeleteAsync(bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.Delete");
            scope.Start();
            try
            {
                var response = await _restClient.DeleteAsync(Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new PrivateStoreDeleteOperation(response);
                if (waitForCompletion)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the private store. All that is not saved will be lost. </summary>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual PrivateStoreDeleteOperation Delete(bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.Delete");
            scope.Start();
            try
            {
                var response = _restClient.Delete(Id.Name, cancellationToken);
                var operation = new PrivateStoreDeleteOperation(response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
        /// <summary> List of offers, regardless the collections. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<OfferProperties>>> QueryOffersAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.QueryOffers");
            scope.Start();
            try
            {
                var response = await _restClient.QueryOffersAsync(Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value.Value, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List of offers, regardless the collections. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<OfferProperties>> QueryOffers(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.QueryOffers");
            scope.Start();
            try
            {
                var response = _restClient.QueryOffers(Id.Name, cancellationToken);
                return Response.FromValue(response.Value.Value, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tenant billing accounts names. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<BillingAccountsResponse>> BillingAccountsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.BillingAccounts");
            scope.Start();
            try
            {
                var response = await _restClient.BillingAccountsAsync(Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tenant billing accounts names. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<BillingAccountsResponse> BillingAccounts(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.BillingAccounts");
            scope.Start();
            try
            {
                var response = _restClient.BillingAccounts(Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> For a given subscriptions list, the API will return a map of collections and the related subscriptions from the supplied list. </summary>
        /// <param name="payload"> The CollectionsToSubscriptionsMappingPayload to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CollectionsToSubscriptionsMappingResponse>> CollectionsToSubscriptionsMappingAsync(CollectionsToSubscriptionsMappingPayload payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.CollectionsToSubscriptionsMapping");
            scope.Start();
            try
            {
                var response = await _restClient.CollectionsToSubscriptionsMappingAsync(Id.Name, payload, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> For a given subscriptions list, the API will return a map of collections and the related subscriptions from the supplied list. </summary>
        /// <param name="payload"> The CollectionsToSubscriptionsMappingPayload to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CollectionsToSubscriptionsMappingResponse> CollectionsToSubscriptionsMapping(CollectionsToSubscriptionsMappingPayload payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.CollectionsToSubscriptionsMapping");
            scope.Start();
            try
            {
                var response = _restClient.CollectionsToSubscriptionsMapping(Id.Name, payload, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get map of plans and related approved subscriptions. </summary>
        /// <param name="payload"> The QueryApprovedPlansPayload to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<QueryApprovedPlansResponse>> QueryApprovedPlansAsync(QueryApprovedPlansPayload payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.QueryApprovedPlans");
            scope.Start();
            try
            {
                var response = await _restClient.QueryApprovedPlansAsync(Id.Name, payload, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get map of plans and related approved subscriptions. </summary>
        /// <param name="payload"> The QueryApprovedPlansPayload to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<QueryApprovedPlansResponse> QueryApprovedPlans(QueryApprovedPlansPayload payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.QueryApprovedPlans");
            scope.Start();
            try
            {
                var response = _restClient.QueryApprovedPlans(Id.Name, payload, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Perform an action on bulk collections. </summary>
        /// <param name="payload"> The BulkCollectionsPayload to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<BulkCollectionsResponse>> BulkCollectionsActionAsync(BulkCollectionsPayload payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.BulkCollectionsAction");
            scope.Start();
            try
            {
                var response = await _restClient.BulkCollectionsActionAsync(Id.Name, payload, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Perform an action on bulk collections. </summary>
        /// <param name="payload"> The BulkCollectionsPayload to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<BulkCollectionsResponse> BulkCollectionsAction(BulkCollectionsPayload payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.BulkCollectionsAction");
            scope.Start();
            try
            {
                var response = _restClient.BulkCollectionsAction(Id.Name, payload, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all open approval requests of current user. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<RequestApprovalResource>>> GetApprovalRequestsListAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.GetApprovalRequestsList");
            scope.Start();
            try
            {
                var response = await _restClient.GetApprovalRequestsListAsync(Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value.Value, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all open approval requests of current user. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<RequestApprovalResource>> GetApprovalRequestsList(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.GetApprovalRequestsList");
            scope.Start();
            try
            {
                var response = _restClient.GetApprovalRequestsList(Id.Name, cancellationToken);
                return Response.FromValue(response.Value.Value, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get open request approval details. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<RequestApprovalResource>> GetRequestApprovalAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.GetRequestApproval");
            scope.Start();
            try
            {
                var response = await _restClient.GetRequestApprovalAsync(Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get open request approval details. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<RequestApprovalResource> GetRequestApproval(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.GetRequestApproval");
            scope.Start();
            try
            {
                var response = _restClient.GetRequestApproval(Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create approval request. </summary>
        /// <param name="payload"> The RequestApprovalResource to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<RequestApprovalResource>> CreateApprovalRequestAsync(RequestApprovalResource payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.CreateApprovalRequest");
            scope.Start();
            try
            {
                var response = await _restClient.CreateApprovalRequestAsync(Id.Parent.Name, Id.Name, payload, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create approval request. </summary>
        /// <param name="payload"> The RequestApprovalResource to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<RequestApprovalResource> CreateApprovalRequest(RequestApprovalResource payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.CreateApprovalRequest");
            scope.Start();
            try
            {
                var response = _restClient.CreateApprovalRequest(Id.Parent.Name, Id.Name, payload, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get request statuses foreach plan, this api is used as a complex GET action. </summary>
        /// <param name="payload"> The QueryRequestApprovalProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<QueryRequestApproval>> QueryRequestApprovalAsync(QueryRequestApprovalProperties payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.QueryRequestApproval");
            scope.Start();
            try
            {
                var response = await _restClient.QueryRequestApprovalAsync(Id.Parent.Name, Id.Name, payload, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get request statuses foreach plan, this api is used as a complex GET action. </summary>
        /// <param name="payload"> The QueryRequestApprovalProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<QueryRequestApproval> QueryRequestApproval(QueryRequestApprovalProperties payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.QueryRequestApproval");
            scope.Start();
            try
            {
                var response = _restClient.QueryRequestApproval(Id.Parent.Name, Id.Name, payload, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of admin request approvals. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<AdminRequestApprovalsResource>>> AdminRequestApprovalsListAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.AdminRequestApprovalsList");
            scope.Start();
            try
            {
                var response = await _restClient.AdminRequestApprovalsListAsync(Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value.Value, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get list of admin request approvals. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<AdminRequestApprovalsResource>> AdminRequestApprovalsList(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.AdminRequestApprovalsList");
            scope.Start();
            try
            {
                var response = _restClient.AdminRequestApprovalsList(Id.Name, cancellationToken);
                return Response.FromValue(response.Value.Value, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get open approval requests. </summary>
        /// <param name="publisherId"> The publisher id of this offer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="publisherId"/> is null. </exception>
        public virtual async Task<Response<AdminRequestApprovalsResource>> GetAdminRequestApprovalAsync(string publisherId, CancellationToken cancellationToken = default)
        {
            if (publisherId == null)
            {
                throw new ArgumentNullException(nameof(publisherId));
            }

            using var scope = _clientDiagnostics.CreateScope("PrivateStore.GetAdminRequestApproval");
            scope.Start();
            try
            {
                var response = await _restClient.GetAdminRequestApprovalAsync(Id.Parent.Name, Id.Name, publisherId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get open approval requests. </summary>
        /// <param name="publisherId"> The publisher id of this offer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="publisherId"/> is null. </exception>
        public virtual Response<AdminRequestApprovalsResource> GetAdminRequestApproval(string publisherId, CancellationToken cancellationToken = default)
        {
            if (publisherId == null)
            {
                throw new ArgumentNullException(nameof(publisherId));
            }

            using var scope = _clientDiagnostics.CreateScope("PrivateStore.GetAdminRequestApproval");
            scope.Start();
            try
            {
                var response = _restClient.GetAdminRequestApproval(Id.Parent.Name, Id.Name, publisherId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the admin action, weather the request is approved or rejected and the approved plans. </summary>
        /// <param name="payload"> The AdminRequestApprovalsResource to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AdminRequestApprovalsResource>> UpdateAdminRequestApprovalAsync(AdminRequestApprovalsResource payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.UpdateAdminRequestApproval");
            scope.Start();
            try
            {
                var response = await _restClient.UpdateAdminRequestApprovalAsync(Id.Parent.Name, Id.Name, payload, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the admin action, weather the request is approved or rejected and the approved plans. </summary>
        /// <param name="payload"> The AdminRequestApprovalsResource to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AdminRequestApprovalsResource> UpdateAdminRequestApproval(AdminRequestApprovalsResource payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.UpdateAdminRequestApproval");
            scope.Start();
            try
            {
                var response = _restClient.UpdateAdminRequestApproval(Id.Parent.Name, Id.Name, payload, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get private store notifications state. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PrivateStoreNotificationsState>> QueryNotificationsStateAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.QueryNotificationsState");
            scope.Start();
            try
            {
                var response = await _restClient.QueryNotificationsStateAsync(Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get private store notifications state. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PrivateStoreNotificationsState> QueryNotificationsState(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.QueryNotificationsState");
            scope.Start();
            try
            {
                var response = _restClient.QueryNotificationsState(Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Acknowledge notification for offer. </summary>
        /// <param name="payload"> The AcknowledgeOfferNotificationProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> AcknowledgeOfferNotificationAsync(AcknowledgeOfferNotificationProperties payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.AcknowledgeOfferNotification");
            scope.Start();
            try
            {
                var response = await _restClient.AcknowledgeOfferNotificationAsync(Id.Parent.Name, Id.Name, payload, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Acknowledge notification for offer. </summary>
        /// <param name="payload"> The AcknowledgeOfferNotificationProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response AcknowledgeOfferNotification(AcknowledgeOfferNotificationProperties payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.AcknowledgeOfferNotification");
            scope.Start();
            try
            {
                var response = _restClient.AcknowledgeOfferNotification(Id.Parent.Name, Id.Name, payload, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Withdraw a user request approval on specific plan. </summary>
        /// <param name="payload"> The WithdrawProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> WithdrawPlanAsync(WithdrawProperties payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.WithdrawPlan");
            scope.Start();
            try
            {
                var response = await _restClient.WithdrawPlanAsync(Id.Parent.Name, Id.Name, payload, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Withdraw a user request approval on specific plan. </summary>
        /// <param name="payload"> The WithdrawProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response WithdrawPlan(WithdrawProperties payload = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PrivateStore.WithdrawPlan");
            scope.Start();
            try
            {
                var response = _restClient.WithdrawPlan(Id.Parent.Name, Id.Name, payload, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a list of Collections in the PrivateStore. </summary>
        /// <returns> An object representing collection of Collections and their operations over a PrivateStore. </returns>
        public CollectionContainer GetCollections()
        {
            return new CollectionContainer(this);
        }
    }
}
