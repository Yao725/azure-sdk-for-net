// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Marketplace.Models;

namespace Azure.ResourceManager.Marketplace
{
    internal partial class PrivateStoreCollectionOfferRestOperations
    {
        private Uri endpoint;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;
        private readonly string _userAgent;

        /// <summary> Initializes a new instance of PrivateStoreCollectionOfferRestOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="options"> The client options used to construct the current client. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public PrivateStoreCollectionOfferRestOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, ClientOptions options, Uri endpoint = null, string apiVersion = "2021-06-01")
        {
            this.endpoint = endpoint ?? new Uri("https://management.azure.com");
            this.apiVersion = apiVersion ?? throw new ArgumentNullException(nameof(apiVersion));
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _userAgent = HttpMessageUtilities.GetUserAgentName(this, options);
        }

        internal HttpMessage CreateGetAllRequest(string privateStoreId, string collectionId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/collections/", false);
            uri.AppendPath(collectionId, true);
            uri.AppendPath("/offers", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Get a list of all private offers in the given private store and collection. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="collectionId"> The collection ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> or <paramref name="collectionId"/> is null. </exception>
        public async Task<Response<OfferListResponse>> GetAllAsync(string privateStoreId, string collectionId, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }
            if (collectionId == null)
            {
                throw new ArgumentNullException(nameof(collectionId));
            }

            using var message = CreateGetAllRequest(privateStoreId, collectionId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        OfferListResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = OfferListResponse.DeserializeOfferListResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get a list of all private offers in the given private store and collection. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="collectionId"> The collection ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> or <paramref name="collectionId"/> is null. </exception>
        public Response<OfferListResponse> GetAll(string privateStoreId, string collectionId, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }
            if (collectionId == null)
            {
                throw new ArgumentNullException(nameof(collectionId));
            }

            using var message = CreateGetAllRequest(privateStoreId, collectionId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        OfferListResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = OfferListResponse.DeserializeOfferListResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRequest(string privateStoreId, string collectionId, string offerId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/collections/", false);
            uri.AppendPath(collectionId, true);
            uri.AppendPath("/offers/", false);
            uri.AppendPath(offerId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Gets information about a specific offer. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="collectionId"> The collection ID. </param>
        /// <param name="offerId"> The offer ID to update or delete. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/>, <paramref name="collectionId"/>, or <paramref name="offerId"/> is null. </exception>
        public async Task<Response<OfferData>> GetAsync(string privateStoreId, string collectionId, string offerId, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }
            if (collectionId == null)
            {
                throw new ArgumentNullException(nameof(collectionId));
            }
            if (offerId == null)
            {
                throw new ArgumentNullException(nameof(offerId));
            }

            using var message = CreateGetRequest(privateStoreId, collectionId, offerId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        OfferData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = OfferData.DeserializeOfferData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((OfferData)null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets information about a specific offer. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="collectionId"> The collection ID. </param>
        /// <param name="offerId"> The offer ID to update or delete. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/>, <paramref name="collectionId"/>, or <paramref name="offerId"/> is null. </exception>
        public Response<OfferData> Get(string privateStoreId, string collectionId, string offerId, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }
            if (collectionId == null)
            {
                throw new ArgumentNullException(nameof(collectionId));
            }
            if (offerId == null)
            {
                throw new ArgumentNullException(nameof(offerId));
            }

            using var message = CreateGetRequest(privateStoreId, collectionId, offerId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        OfferData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = OfferData.DeserializeOfferData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((OfferData)null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string privateStoreId, string collectionId, string offerId, OfferData payload)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/collections/", false);
            uri.AppendPath(collectionId, true);
            uri.AppendPath("/offers/", false);
            uri.AppendPath(offerId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (payload != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(payload);
                request.Content = content;
            }
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Update or add an offer to a specific collection of the private store. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="collectionId"> The collection ID. </param>
        /// <param name="offerId"> The offer ID to update or delete. </param>
        /// <param name="payload"> The Offer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/>, <paramref name="collectionId"/>, or <paramref name="offerId"/> is null. </exception>
        public async Task<Response<OfferData>> CreateOrUpdateAsync(string privateStoreId, string collectionId, string offerId, OfferData payload = null, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }
            if (collectionId == null)
            {
                throw new ArgumentNullException(nameof(collectionId));
            }
            if (offerId == null)
            {
                throw new ArgumentNullException(nameof(offerId));
            }

            using var message = CreateCreateOrUpdateRequest(privateStoreId, collectionId, offerId, payload);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        OfferData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = OfferData.DeserializeOfferData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update or add an offer to a specific collection of the private store. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="collectionId"> The collection ID. </param>
        /// <param name="offerId"> The offer ID to update or delete. </param>
        /// <param name="payload"> The Offer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/>, <paramref name="collectionId"/>, or <paramref name="offerId"/> is null. </exception>
        public Response<OfferData> CreateOrUpdate(string privateStoreId, string collectionId, string offerId, OfferData payload = null, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }
            if (collectionId == null)
            {
                throw new ArgumentNullException(nameof(collectionId));
            }
            if (offerId == null)
            {
                throw new ArgumentNullException(nameof(offerId));
            }

            using var message = CreateCreateOrUpdateRequest(privateStoreId, collectionId, offerId, payload);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        OfferData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = OfferData.DeserializeOfferData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRequest(string privateStoreId, string collectionId, string offerId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/collections/", false);
            uri.AppendPath(collectionId, true);
            uri.AppendPath("/offers/", false);
            uri.AppendPath(offerId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Deletes an offer from the given collection of private store. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="collectionId"> The collection ID. </param>
        /// <param name="offerId"> The offer ID to update or delete. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/>, <paramref name="collectionId"/>, or <paramref name="offerId"/> is null. </exception>
        public async Task<Response> DeleteAsync(string privateStoreId, string collectionId, string offerId, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }
            if (collectionId == null)
            {
                throw new ArgumentNullException(nameof(collectionId));
            }
            if (offerId == null)
            {
                throw new ArgumentNullException(nameof(offerId));
            }

            using var message = CreateDeleteRequest(privateStoreId, collectionId, offerId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes an offer from the given collection of private store. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="collectionId"> The collection ID. </param>
        /// <param name="offerId"> The offer ID to update or delete. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/>, <paramref name="collectionId"/>, or <paramref name="offerId"/> is null. </exception>
        public Response Delete(string privateStoreId, string collectionId, string offerId, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }
            if (collectionId == null)
            {
                throw new ArgumentNullException(nameof(collectionId));
            }
            if (offerId == null)
            {
                throw new ArgumentNullException(nameof(offerId));
            }

            using var message = CreateDeleteRequest(privateStoreId, collectionId, offerId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePostRequest(string privateStoreId, string collectionId, string offerId, Models.Operation? payload)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/collections/", false);
            uri.AppendPath(collectionId, true);
            uri.AppendPath("/offers/", false);
            uri.AppendPath(offerId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (payload != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteStringValue(payload.Value.ToString());
                request.Content = content;
            }
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Delete Private store offer. This is a workaround. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="collectionId"> The collection ID. </param>
        /// <param name="offerId"> The offer ID to update or delete. </param>
        /// <param name="payload"> The Operation to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/>, <paramref name="collectionId"/>, or <paramref name="offerId"/> is null. </exception>
        public async Task<Response> PostAsync(string privateStoreId, string collectionId, string offerId, Models.Operation? payload = null, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }
            if (collectionId == null)
            {
                throw new ArgumentNullException(nameof(collectionId));
            }
            if (offerId == null)
            {
                throw new ArgumentNullException(nameof(offerId));
            }

            using var message = CreatePostRequest(privateStoreId, collectionId, offerId, payload);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Delete Private store offer. This is a workaround. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="collectionId"> The collection ID. </param>
        /// <param name="offerId"> The offer ID to update or delete. </param>
        /// <param name="payload"> The Operation to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/>, <paramref name="collectionId"/>, or <paramref name="offerId"/> is null. </exception>
        public Response Post(string privateStoreId, string collectionId, string offerId, Models.Operation? payload = null, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }
            if (collectionId == null)
            {
                throw new ArgumentNullException(nameof(collectionId));
            }
            if (offerId == null)
            {
                throw new ArgumentNullException(nameof(offerId));
            }

            using var message = CreatePostRequest(privateStoreId, collectionId, offerId, payload);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllNextPageRequest(string nextLink, string privateStoreId, string collectionId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Get a list of all private offers in the given private store and collection. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="collectionId"> The collection ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="privateStoreId"/>, or <paramref name="collectionId"/> is null. </exception>
        public async Task<Response<OfferListResponse>> GetAllNextPageAsync(string nextLink, string privateStoreId, string collectionId, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }
            if (collectionId == null)
            {
                throw new ArgumentNullException(nameof(collectionId));
            }

            using var message = CreateGetAllNextPageRequest(nextLink, privateStoreId, collectionId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        OfferListResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = OfferListResponse.DeserializeOfferListResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get a list of all private offers in the given private store and collection. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="collectionId"> The collection ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="privateStoreId"/>, or <paramref name="collectionId"/> is null. </exception>
        public Response<OfferListResponse> GetAllNextPage(string nextLink, string privateStoreId, string collectionId, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }
            if (collectionId == null)
            {
                throw new ArgumentNullException(nameof(collectionId));
            }

            using var message = CreateGetAllNextPageRequest(nextLink, privateStoreId, collectionId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        OfferListResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = OfferListResponse.DeserializeOfferListResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
