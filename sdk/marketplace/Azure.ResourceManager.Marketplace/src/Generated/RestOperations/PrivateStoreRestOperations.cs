// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Marketplace.Models;

namespace Azure.ResourceManager.Marketplace
{
    internal partial class PrivateStoreRestOperations
    {
        private Uri endpoint;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;
        private readonly string _userAgent;

        /// <summary> Initializes a new instance of PrivateStoreRestOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="options"> The client options used to construct the current client. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public PrivateStoreRestOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, ClientOptions options, Uri endpoint = null, string apiVersion = "2021-06-01")
        {
            this.endpoint = endpoint ?? new Uri("https://management.azure.com");
            this.apiVersion = apiVersion ?? throw new ArgumentNullException(nameof(apiVersion));
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _userAgent = HttpMessageUtilities.GetUserAgentName(this, options);
        }

        internal HttpMessage CreateGetAllRequest(string useCache)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores", false);
            uri.AppendQuery("api-version", apiVersion, true);
            if (useCache != null)
            {
                uri.AppendQuery("use-cache", useCache, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Gets the list of available private stores. </summary>
        /// <param name="useCache"> Determines if to use cache or DB for serving this request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<PrivateStoreList>> GetAllAsync(string useCache = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllRequest(useCache);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PrivateStoreList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PrivateStoreList.DeserializePrivateStoreList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the list of available private stores. </summary>
        /// <param name="useCache"> Determines if to use cache or DB for serving this request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<PrivateStoreList> GetAll(string useCache = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllRequest(useCache);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PrivateStoreList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PrivateStoreList.DeserializePrivateStoreList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRequest(string privateStoreId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Get information about the private store. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        public async Task<Response<PrivateStoreData>> GetAsync(string privateStoreId, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }

            using var message = CreateGetRequest(privateStoreId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PrivateStoreData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PrivateStoreData.DeserializePrivateStoreData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((PrivateStoreData)null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get information about the private store. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        public Response<PrivateStoreData> Get(string privateStoreId, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }

            using var message = CreateGetRequest(privateStoreId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PrivateStoreData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PrivateStoreData.DeserializePrivateStoreData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((PrivateStoreData)null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string privateStoreId, PrivateStoreData payload)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (payload != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(payload);
                request.Content = content;
            }
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Changes private store properties. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="payload"> The PrivateStore to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        public async Task<Response> CreateOrUpdateAsync(string privateStoreId, PrivateStoreData payload = null, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }

            using var message = CreateCreateOrUpdateRequest(privateStoreId, payload);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Changes private store properties. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="payload"> The PrivateStore to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        public Response CreateOrUpdate(string privateStoreId, PrivateStoreData payload = null, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }

            using var message = CreateCreateOrUpdateRequest(privateStoreId, payload);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRequest(string privateStoreId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Deletes the private store. All that is not saved will be lost. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        public async Task<Response> DeleteAsync(string privateStoreId, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }

            using var message = CreateDeleteRequest(privateStoreId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes the private store. All that is not saved will be lost. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        public Response Delete(string privateStoreId, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }

            using var message = CreateDeleteRequest(privateStoreId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateQueryOffersRequest(string privateStoreId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/queryOffers", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> List of offers, regardless the collections. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        public async Task<Response<QueryOffers>> QueryOffersAsync(string privateStoreId, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }

            using var message = CreateQueryOffersRequest(privateStoreId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryOffers value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Models.QueryOffers.DeserializeQueryOffers(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> List of offers, regardless the collections. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        public Response<QueryOffers> QueryOffers(string privateStoreId, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }

            using var message = CreateQueryOffersRequest(privateStoreId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryOffers value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Models.QueryOffers.DeserializeQueryOffers(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateBillingAccountsRequest(string privateStoreId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/billingAccounts", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Tenant billing accounts names. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        public async Task<Response<BillingAccountsResponse>> BillingAccountsAsync(string privateStoreId, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }

            using var message = CreateBillingAccountsRequest(privateStoreId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        BillingAccountsResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = BillingAccountsResponse.DeserializeBillingAccountsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Tenant billing accounts names. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        public Response<BillingAccountsResponse> BillingAccounts(string privateStoreId, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }

            using var message = CreateBillingAccountsRequest(privateStoreId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        BillingAccountsResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = BillingAccountsResponse.DeserializeBillingAccountsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCollectionsToSubscriptionsMappingRequest(string privateStoreId, CollectionsToSubscriptionsMappingPayload payload)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/collectionsToSubscriptionsMapping", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (payload != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(payload);
                request.Content = content;
            }
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> For a given subscriptions list, the API will return a map of collections and the related subscriptions from the supplied list. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="payload"> The CollectionsToSubscriptionsMappingPayload to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        public async Task<Response<CollectionsToSubscriptionsMappingResponse>> CollectionsToSubscriptionsMappingAsync(string privateStoreId, CollectionsToSubscriptionsMappingPayload payload = null, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }

            using var message = CreateCollectionsToSubscriptionsMappingRequest(privateStoreId, payload);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CollectionsToSubscriptionsMappingResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = CollectionsToSubscriptionsMappingResponse.DeserializeCollectionsToSubscriptionsMappingResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> For a given subscriptions list, the API will return a map of collections and the related subscriptions from the supplied list. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="payload"> The CollectionsToSubscriptionsMappingPayload to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        public Response<CollectionsToSubscriptionsMappingResponse> CollectionsToSubscriptionsMapping(string privateStoreId, CollectionsToSubscriptionsMappingPayload payload = null, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }

            using var message = CreateCollectionsToSubscriptionsMappingRequest(privateStoreId, payload);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CollectionsToSubscriptionsMappingResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = CollectionsToSubscriptionsMappingResponse.DeserializeCollectionsToSubscriptionsMappingResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateQueryApprovedPlansRequest(string privateStoreId, QueryApprovedPlansPayload payload)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/queryApprovedPlans", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (payload != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(payload);
                request.Content = content;
            }
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Get map of plans and related approved subscriptions. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="payload"> The QueryApprovedPlansPayload to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        public async Task<Response<QueryApprovedPlansResponse>> QueryApprovedPlansAsync(string privateStoreId, QueryApprovedPlansPayload payload = null, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }

            using var message = CreateQueryApprovedPlansRequest(privateStoreId, payload);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryApprovedPlansResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = QueryApprovedPlansResponse.DeserializeQueryApprovedPlansResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get map of plans and related approved subscriptions. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="payload"> The QueryApprovedPlansPayload to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        public Response<QueryApprovedPlansResponse> QueryApprovedPlans(string privateStoreId, QueryApprovedPlansPayload payload = null, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }

            using var message = CreateQueryApprovedPlansRequest(privateStoreId, payload);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryApprovedPlansResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = QueryApprovedPlansResponse.DeserializeQueryApprovedPlansResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateBulkCollectionsActionRequest(string privateStoreId, BulkCollectionsPayload payload)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/bulkCollectionsAction", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (payload != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(payload);
                request.Content = content;
            }
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Perform an action on bulk collections. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="payload"> The BulkCollectionsPayload to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        public async Task<Response<BulkCollectionsResponse>> BulkCollectionsActionAsync(string privateStoreId, BulkCollectionsPayload payload = null, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }

            using var message = CreateBulkCollectionsActionRequest(privateStoreId, payload);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        BulkCollectionsResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = BulkCollectionsResponse.DeserializeBulkCollectionsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Perform an action on bulk collections. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="payload"> The BulkCollectionsPayload to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        public Response<BulkCollectionsResponse> BulkCollectionsAction(string privateStoreId, BulkCollectionsPayload payload = null, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }

            using var message = CreateBulkCollectionsActionRequest(privateStoreId, payload);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        BulkCollectionsResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = BulkCollectionsResponse.DeserializeBulkCollectionsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetApprovalRequestsListRequest(string privateStoreId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/requestApprovals", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Get all open approval requests of current user. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        public async Task<Response<RequestApprovalsList>> GetApprovalRequestsListAsync(string privateStoreId, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }

            using var message = CreateGetApprovalRequestsListRequest(privateStoreId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RequestApprovalsList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestApprovalsList.DeserializeRequestApprovalsList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get all open approval requests of current user. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        public Response<RequestApprovalsList> GetApprovalRequestsList(string privateStoreId, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }

            using var message = CreateGetApprovalRequestsListRequest(privateStoreId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RequestApprovalsList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestApprovalsList.DeserializeRequestApprovalsList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRequestApprovalRequest(string privateStoreId, string requestApprovalId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/requestApprovals/", false);
            uri.AppendPath(requestApprovalId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Get open request approval details. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="requestApprovalId"> The request approval ID to get create or update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> or <paramref name="requestApprovalId"/> is null. </exception>
        public async Task<Response<RequestApprovalResource>> GetRequestApprovalAsync(string privateStoreId, string requestApprovalId, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }
            if (requestApprovalId == null)
            {
                throw new ArgumentNullException(nameof(requestApprovalId));
            }

            using var message = CreateGetRequestApprovalRequest(privateStoreId, requestApprovalId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RequestApprovalResource value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestApprovalResource.DeserializeRequestApprovalResource(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get open request approval details. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="requestApprovalId"> The request approval ID to get create or update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> or <paramref name="requestApprovalId"/> is null. </exception>
        public Response<RequestApprovalResource> GetRequestApproval(string privateStoreId, string requestApprovalId, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }
            if (requestApprovalId == null)
            {
                throw new ArgumentNullException(nameof(requestApprovalId));
            }

            using var message = CreateGetRequestApprovalRequest(privateStoreId, requestApprovalId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RequestApprovalResource value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestApprovalResource.DeserializeRequestApprovalResource(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateApprovalRequestRequest(string privateStoreId, string requestApprovalId, RequestApprovalResource payload)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/requestApprovals/", false);
            uri.AppendPath(requestApprovalId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (payload != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(payload);
                request.Content = content;
            }
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Create approval request. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="requestApprovalId"> The request approval ID to get create or update. </param>
        /// <param name="payload"> The RequestApprovalResource to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> or <paramref name="requestApprovalId"/> is null. </exception>
        public async Task<Response<RequestApprovalResource>> CreateApprovalRequestAsync(string privateStoreId, string requestApprovalId, RequestApprovalResource payload = null, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }
            if (requestApprovalId == null)
            {
                throw new ArgumentNullException(nameof(requestApprovalId));
            }

            using var message = CreateCreateApprovalRequestRequest(privateStoreId, requestApprovalId, payload);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RequestApprovalResource value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RequestApprovalResource.DeserializeRequestApprovalResource(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Create approval request. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="requestApprovalId"> The request approval ID to get create or update. </param>
        /// <param name="payload"> The RequestApprovalResource to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> or <paramref name="requestApprovalId"/> is null. </exception>
        public Response<RequestApprovalResource> CreateApprovalRequest(string privateStoreId, string requestApprovalId, RequestApprovalResource payload = null, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }
            if (requestApprovalId == null)
            {
                throw new ArgumentNullException(nameof(requestApprovalId));
            }

            using var message = CreateCreateApprovalRequestRequest(privateStoreId, requestApprovalId, payload);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RequestApprovalResource value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RequestApprovalResource.DeserializeRequestApprovalResource(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateQueryRequestApprovalRequest(string privateStoreId, string requestApprovalId, QueryRequestApprovalProperties payload)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/requestApprovals/", false);
            uri.AppendPath(requestApprovalId, true);
            uri.AppendPath("/query", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (payload != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(payload);
                request.Content = content;
            }
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Get request statuses foreach plan, this api is used as a complex GET action. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="requestApprovalId"> The request approval ID to get create or update. </param>
        /// <param name="payload"> The QueryRequestApprovalProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> or <paramref name="requestApprovalId"/> is null. </exception>
        public async Task<Response<QueryRequestApproval>> QueryRequestApprovalAsync(string privateStoreId, string requestApprovalId, QueryRequestApprovalProperties payload = null, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }
            if (requestApprovalId == null)
            {
                throw new ArgumentNullException(nameof(requestApprovalId));
            }

            using var message = CreateQueryRequestApprovalRequest(privateStoreId, requestApprovalId, payload);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryRequestApproval value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Models.QueryRequestApproval.DeserializeQueryRequestApproval(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get request statuses foreach plan, this api is used as a complex GET action. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="requestApprovalId"> The request approval ID to get create or update. </param>
        /// <param name="payload"> The QueryRequestApprovalProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> or <paramref name="requestApprovalId"/> is null. </exception>
        public Response<QueryRequestApproval> QueryRequestApproval(string privateStoreId, string requestApprovalId, QueryRequestApprovalProperties payload = null, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }
            if (requestApprovalId == null)
            {
                throw new ArgumentNullException(nameof(requestApprovalId));
            }

            using var message = CreateQueryRequestApprovalRequest(privateStoreId, requestApprovalId, payload);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryRequestApproval value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Models.QueryRequestApproval.DeserializeQueryRequestApproval(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAdminRequestApprovalsListRequest(string privateStoreId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/adminRequestApprovals", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Get list of admin request approvals. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        public async Task<Response<AdminRequestApprovalsList>> AdminRequestApprovalsListAsync(string privateStoreId, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }

            using var message = CreateAdminRequestApprovalsListRequest(privateStoreId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AdminRequestApprovalsList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Models.AdminRequestApprovalsList.DeserializeAdminRequestApprovalsList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get list of admin request approvals. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        public Response<AdminRequestApprovalsList> AdminRequestApprovalsList(string privateStoreId, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }

            using var message = CreateAdminRequestApprovalsListRequest(privateStoreId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AdminRequestApprovalsList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Models.AdminRequestApprovalsList.DeserializeAdminRequestApprovalsList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAdminRequestApprovalRequest(string privateStoreId, string adminRequestApprovalId, string publisherId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/adminRequestApprovals/", false);
            uri.AppendPath(adminRequestApprovalId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            uri.AppendQuery("publisherId", publisherId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Get open approval requests. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="adminRequestApprovalId"> The admin request approval ID to get create or update. </param>
        /// <param name="publisherId"> The publisher id of this offer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/>, <paramref name="adminRequestApprovalId"/>, or <paramref name="publisherId"/> is null. </exception>
        public async Task<Response<AdminRequestApprovalsResource>> GetAdminRequestApprovalAsync(string privateStoreId, string adminRequestApprovalId, string publisherId, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }
            if (adminRequestApprovalId == null)
            {
                throw new ArgumentNullException(nameof(adminRequestApprovalId));
            }
            if (publisherId == null)
            {
                throw new ArgumentNullException(nameof(publisherId));
            }

            using var message = CreateGetAdminRequestApprovalRequest(privateStoreId, adminRequestApprovalId, publisherId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AdminRequestApprovalsResource value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AdminRequestApprovalsResource.DeserializeAdminRequestApprovalsResource(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get open approval requests. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="adminRequestApprovalId"> The admin request approval ID to get create or update. </param>
        /// <param name="publisherId"> The publisher id of this offer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/>, <paramref name="adminRequestApprovalId"/>, or <paramref name="publisherId"/> is null. </exception>
        public Response<AdminRequestApprovalsResource> GetAdminRequestApproval(string privateStoreId, string adminRequestApprovalId, string publisherId, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }
            if (adminRequestApprovalId == null)
            {
                throw new ArgumentNullException(nameof(adminRequestApprovalId));
            }
            if (publisherId == null)
            {
                throw new ArgumentNullException(nameof(publisherId));
            }

            using var message = CreateGetAdminRequestApprovalRequest(privateStoreId, adminRequestApprovalId, publisherId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AdminRequestApprovalsResource value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AdminRequestApprovalsResource.DeserializeAdminRequestApprovalsResource(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateAdminRequestApprovalRequest(string privateStoreId, string adminRequestApprovalId, AdminRequestApprovalsResource payload)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/adminRequestApprovals/", false);
            uri.AppendPath(adminRequestApprovalId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (payload != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(payload);
                request.Content = content;
            }
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Update the admin action, weather the request is approved or rejected and the approved plans. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="adminRequestApprovalId"> The admin request approval ID to get create or update. </param>
        /// <param name="payload"> The AdminRequestApprovalsResource to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> or <paramref name="adminRequestApprovalId"/> is null. </exception>
        public async Task<Response<AdminRequestApprovalsResource>> UpdateAdminRequestApprovalAsync(string privateStoreId, string adminRequestApprovalId, AdminRequestApprovalsResource payload = null, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }
            if (adminRequestApprovalId == null)
            {
                throw new ArgumentNullException(nameof(adminRequestApprovalId));
            }

            using var message = CreateUpdateAdminRequestApprovalRequest(privateStoreId, adminRequestApprovalId, payload);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AdminRequestApprovalsResource value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AdminRequestApprovalsResource.DeserializeAdminRequestApprovalsResource(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Update the admin action, weather the request is approved or rejected and the approved plans. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="adminRequestApprovalId"> The admin request approval ID to get create or update. </param>
        /// <param name="payload"> The AdminRequestApprovalsResource to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> or <paramref name="adminRequestApprovalId"/> is null. </exception>
        public Response<AdminRequestApprovalsResource> UpdateAdminRequestApproval(string privateStoreId, string adminRequestApprovalId, AdminRequestApprovalsResource payload = null, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }
            if (adminRequestApprovalId == null)
            {
                throw new ArgumentNullException(nameof(adminRequestApprovalId));
            }

            using var message = CreateUpdateAdminRequestApprovalRequest(privateStoreId, adminRequestApprovalId, payload);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AdminRequestApprovalsResource value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AdminRequestApprovalsResource.DeserializeAdminRequestApprovalsResource(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateQueryNotificationsStateRequest(string privateStoreId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/queryNotificationsState", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Get private store notifications state. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        public async Task<Response<PrivateStoreNotificationsState>> QueryNotificationsStateAsync(string privateStoreId, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }

            using var message = CreateQueryNotificationsStateRequest(privateStoreId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PrivateStoreNotificationsState value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PrivateStoreNotificationsState.DeserializePrivateStoreNotificationsState(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get private store notifications state. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> is null. </exception>
        public Response<PrivateStoreNotificationsState> QueryNotificationsState(string privateStoreId, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }

            using var message = CreateQueryNotificationsStateRequest(privateStoreId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PrivateStoreNotificationsState value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PrivateStoreNotificationsState.DeserializePrivateStoreNotificationsState(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAcknowledgeOfferNotificationRequest(string privateStoreId, string offerId, AcknowledgeOfferNotificationProperties payload)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/offers/", false);
            uri.AppendPath(offerId, true);
            uri.AppendPath("/acknowledgeNotification", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (payload != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(payload);
                request.Content = content;
            }
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Acknowledge notification for offer. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="offerId"> The offer ID to update or delete. </param>
        /// <param name="payload"> The AcknowledgeOfferNotificationProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> or <paramref name="offerId"/> is null. </exception>
        public async Task<Response> AcknowledgeOfferNotificationAsync(string privateStoreId, string offerId, AcknowledgeOfferNotificationProperties payload = null, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }
            if (offerId == null)
            {
                throw new ArgumentNullException(nameof(offerId));
            }

            using var message = CreateAcknowledgeOfferNotificationRequest(privateStoreId, offerId, payload);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Acknowledge notification for offer. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="offerId"> The offer ID to update or delete. </param>
        /// <param name="payload"> The AcknowledgeOfferNotificationProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> or <paramref name="offerId"/> is null. </exception>
        public Response AcknowledgeOfferNotification(string privateStoreId, string offerId, AcknowledgeOfferNotificationProperties payload = null, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }
            if (offerId == null)
            {
                throw new ArgumentNullException(nameof(offerId));
            }

            using var message = CreateAcknowledgeOfferNotificationRequest(privateStoreId, offerId, payload);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateWithdrawPlanRequest(string privateStoreId, string requestApprovalId, WithdrawProperties payload)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/providers/Microsoft.Marketplace/privateStores/", false);
            uri.AppendPath(privateStoreId, true);
            uri.AppendPath("/requestApprovals/", false);
            uri.AppendPath(requestApprovalId, true);
            uri.AppendPath("/withdrawPlan", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (payload != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(payload);
                request.Content = content;
            }
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Withdraw a user request approval on specific plan. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="requestApprovalId"> The request approval ID to get create or update. </param>
        /// <param name="payload"> The WithdrawProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> or <paramref name="requestApprovalId"/> is null. </exception>
        public async Task<Response> WithdrawPlanAsync(string privateStoreId, string requestApprovalId, WithdrawProperties payload = null, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }
            if (requestApprovalId == null)
            {
                throw new ArgumentNullException(nameof(requestApprovalId));
            }

            using var message = CreateWithdrawPlanRequest(privateStoreId, requestApprovalId, payload);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Withdraw a user request approval on specific plan. </summary>
        /// <param name="privateStoreId"> The store ID - must use the tenant ID. </param>
        /// <param name="requestApprovalId"> The request approval ID to get create or update. </param>
        /// <param name="payload"> The WithdrawProperties to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateStoreId"/> or <paramref name="requestApprovalId"/> is null. </exception>
        public Response WithdrawPlan(string privateStoreId, string requestApprovalId, WithdrawProperties payload = null, CancellationToken cancellationToken = default)
        {
            if (privateStoreId == null)
            {
                throw new ArgumentNullException(nameof(privateStoreId));
            }
            if (requestApprovalId == null)
            {
                throw new ArgumentNullException(nameof(requestApprovalId));
            }

            using var message = CreateWithdrawPlanRequest(privateStoreId, requestApprovalId, payload);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllNextPageRequest(string nextLink, string useCache)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.SetProperty("UserAgentOverride", _userAgent);
            return message;
        }

        /// <summary> Gets the list of available private stores. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="useCache"> Determines if to use cache or DB for serving this request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<Response<PrivateStoreList>> GetAllNextPageAsync(string nextLink, string useCache = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetAllNextPageRequest(nextLink, useCache);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PrivateStoreList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PrivateStoreList.DeserializePrivateStoreList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the list of available private stores. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="useCache"> Determines if to use cache or DB for serving this request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public Response<PrivateStoreList> GetAllNextPage(string nextLink, string useCache = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetAllNextPageRequest(nextLink, useCache);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PrivateStoreList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PrivateStoreList.DeserializePrivateStoreList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
